// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// A registered user
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teams     TeamMember[]
  projects  Project[] @relation("OwnedProjects")
  tasks     Task[]    @relation("AssignedTasks")
  comments  Comment[]
}

// Many-to-many link between User and Team with roles
model TeamMember {
  id     String  @id @default(cuid())
  role   String
  team   Team    @relation(fields: [teamId], references: [id])
  teamId String
  user   User    @relation(fields: [userId], references: [id])
  userId String

  @@unique([teamId, userId])
}

// A team that owns projects
model Team {
  id        String        @id @default(cuid())
  name      String
  members   TeamMember[]
  projects  Project[]
  createdAt DateTime      @default(now())
}

// A project belongs to a team and has many tasks
model Project {
  id        String    @id @default(cuid())
  name      String
  description String?
  team      Team      @relation(fields: [teamId], references: [id])
  teamId    String
  owner     User      @relation("OwnedProjects", fields: [ownerId], references: [id])
  ownerId   String
  tasks     Task[]
  createdAt DateTime  @default(now())
}

// Tasks inside projects
model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("todo") // todo, in-progress, done
  dueDate     DateTime?
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  assignee    User?     @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId  String?
  comments    Comment[]
  createdAt   DateTime  @default(now())
}

// Comments on tasks
model Comment {
  id        String    @id @default(cuid())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    String
  createdAt DateTime  @default(now())
}
