// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  lists           List[]    @relation("ListOwner")
  invitesSent     Invite[]  @relation("InvitesSent")
  invitesReceived Invite[]  @relation("InvitesReceived")
  comments        Comment[]
  collaborations  Collaboration[]
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  tokenHash String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model List {
  id          String   @id @default(cuid())
  title       String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner        User           @relation("ListOwner", fields: [ownerId], references: [id])
  tasks        Task[]
  collaborators Collaboration[]
  comments     Comment[]
  invites       Invite[]
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  dueDate     DateTime?
  listId      String
  parentId    String? // for subtasks
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  list     List     @relation(fields: [listId], references: [id])
  subtasks Task[]   @relation("Subtasks", fields: [], references: [])
  parent   Task?    @relation("Subtasks", fields: [parentId], references: [id])
}

model Collaboration {
  id        String   @id @default(cuid())
  listId    String
  userId    String
  createdAt DateTime @default(now())

  list List @relation(fields: [listId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([listId, userId])
}

model Invite {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  listId     String
  status     InviteStatus @default(PENDING)
  createdAt  DateTime @default(now())

  sender   User @relation("InvitesSent", fields: [senderId], references: [id])
  receiver User @relation("InvitesReceived", fields: [receiverId], references: [id])
  list     List @relation(fields: [listId], references: [id])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  listId    String
  userId    String
  createdAt DateTime @default(now())

  list List @relation(fields: [listId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
